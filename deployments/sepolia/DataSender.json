{
  "address": "0x92fd713F48ae713bAe59840B95d9fdCAaD395935",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calculatedFees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "text",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "text",
          "type": "string"
        }
      ],
      "name": "sendMessage",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb5a41e0d73f855a0985a2192d9972bac72e793d6e75f4d68991defe7a1c434e2",
  "receipt": {
    "to": null,
    "from": "0x294e0bCC654D249eA6EF17f9f83d20B58999C921",
    "contractAddress": "0x92fd713F48ae713bAe59840B95d9fdCAaD395935",
    "transactionIndex": 41,
    "gasUsed": "1164062",
    "logsBloom": "0x
    "blockHash": "0x35d8bf039265c7e13f4d12e7a385848e17e07834686fdb8ae3cf14ad30d38943",
    "transactionHash": "0xb5a41e0d73f855a0985a2192d9972bac72e793d6e75f4d68991defe7a1c434e2",
    "logs": [],
    "blockNumber": 6638161,
    "cumulativeGasUsed": "7591984",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0bf3de8c5d3e8a2b34d2beeb17abfcebaf363a59",
    "0x779877a7b0d9e8603169ddbd7836e478b4624789"
  ],
  "numDeployments": 1,
  "solcInputHash": "9c42f265ea84266e95ec882630f4bbd7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"name\":\"sendMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_link\":\"The address of the link contract.\",\"_router\":\"The address of the router contract.\"}},\"sendMessage(uint64,address,string)\":{\"details\":\"Assumes your contract has sufficient LINK.\",\"params\":{\"destinationChainSelector\":\"The identifier (aka selector) for the destination blockchain.\",\"receiver\":\"The address of the recipient on the destination blockchain.\",\"text\":\"The string text to be sent.\"},\"returns\":{\"messageId\":\"The ID of the message that was sent.\"}}},\"title\":\"- A simple contract for sending string data across chains.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"constructor\":{\"notice\":\"Constructor initializes the contract with the router address.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"sendMessage(uint64,address,string)\":{\"notice\":\"Sends data to receiver on the destination chain.\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DataSender.sol\":\"DataSender\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x927e505bb87a58ea04d1a9efe945f4bf4093e88b618b6fede3b9c68e1e63d989\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwner} from \\\"./ConfirmedOwner.sol\\\";\\n\\n/// @title The OwnerIsCreator contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract OwnerIsCreator is ConfirmedOwner {\\n  constructor() ConfirmedOwner(msg.sender) {}\\n}\\n\",\"keccak256\":\"0x895af02d6a3df2930bbb6ec1f2d68118b492ca6e710ba0c34fcb6b574a0906aa\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xd3643595b0a46f577fff806736cbe4e3f81707c93fb1693a8a7960466e5cd321\",\"license\":\"MIT\"},\"contracts/DataSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\r\\nimport {OwnerIsCreator} from \\\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\\\";\\r\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\r\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\r\\n * DO NOT USE THIS CODE IN PRODUCTION.\\r\\n */\\r\\n\\r\\n/// @title - A simple contract for sending string data across chains.\\r\\ncontract DataSender is OwnerIsCreator {\\r\\n    // Custom errors to provide more descriptive revert messages.\\r\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance.\\r\\n\\r\\n    // Event emitted when a message is sent to another chain.\\r\\n    event MessageSent(\\r\\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\\r\\n        uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\\r\\n        address receiver, // The address of the receiver on the destination chain.\\r\\n        string text, // The text being sent.\\r\\n        address feeToken, // the token address used to pay CCIP fees.\\r\\n        uint256 fees // The fees paid for sending the CCIP message.\\r\\n    );\\r\\n\\r\\n    IRouterClient private s_router;\\r\\n\\r\\n    LinkTokenInterface private s_linkToken;\\r\\n\\r\\n    /// @notice Constructor initializes the contract with the router address.\\r\\n    /// @param _router The address of the router contract.\\r\\n    /// @param _link The address of the link contract.\\r\\n    constructor(address _router, address _link) {\\r\\n        s_router = IRouterClient(_router);\\r\\n        s_linkToken = LinkTokenInterface(_link);\\r\\n    }\\r\\n\\r\\n    /// @notice Sends data to receiver on the destination chain.\\r\\n    /// @dev Assumes your contract has sufficient LINK.\\r\\n    /// @param destinationChainSelector The identifier (aka selector) for the destination blockchain.\\r\\n    /// @param receiver The address of the recipient on the destination blockchain.\\r\\n    /// @param text The string text to be sent.\\r\\n    /// @return messageId The ID of the message that was sent.\\r\\n    function sendMessage(\\r\\n        uint64 destinationChainSelector,\\r\\n        address receiver,\\r\\n        string calldata text\\r\\n    ) external onlyOwner returns (bytes32 messageId) {\\r\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\r\\n        Client.EVM2AnyMessage memory evm2AnyMessage = Client.EVM2AnyMessage({\\r\\n            receiver: abi.encode(receiver), // ABI-encoded receiver address\\r\\n            data: abi.encode(text), // ABI-encoded string\\r\\n            tokenAmounts: new Client.EVMTokenAmount[](0), // Empty array indicating no tokens are being sent\\r\\n            extraArgs: Client._argsToBytes(\\r\\n                // Additional arguments, setting gas limit\\r\\n                Client.EVMExtraArgsV1({gasLimit: 200_000})\\r\\n            ),\\r\\n            // Set the feeToken  address, indicating LINK will be used for fees\\r\\n            feeToken: address(s_linkToken)\\r\\n        });\\r\\n\\r\\n        // Get the fee required to send the message\\r\\n        uint256 fees = s_router.getFee(\\r\\n            destinationChainSelector,\\r\\n            evm2AnyMessage\\r\\n        );\\r\\n\\r\\n        if (fees > s_linkToken.balanceOf(address(this)))\\r\\n            revert NotEnoughBalance(s_linkToken.balanceOf(address(this)), fees);\\r\\n\\r\\n        // approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\\r\\n        s_linkToken.approve(address(s_router), fees);\\r\\n\\r\\n        // Send the message through the router and store the returned message ID\\r\\n        messageId = s_router.ccipSend(destinationChainSelector, evm2AnyMessage);\\r\\n\\r\\n        // Emit an event with message details\\r\\n        emit MessageSent(\\r\\n            messageId,\\r\\n            destinationChainSelector,\\r\\n            receiver,\\r\\n            text,\\r\\n            address(s_linkToken),\\r\\n            fees\\r\\n        );\\r\\n\\r\\n        // Return the message ID\\r\\n        return messageId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0aa72a5b628e736c04a67c2afa4167faa343a7a7d28a9c9f775544b6ace3b064\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630eb5ad451461005157806379ba5097146100815780638da5cb5b1461008b578063f2fde38b146100a9575b600080fd5b61006b60048036038101906100669190610b24565b6100c5565b6040516100789190610bb1565b60405180910390f35b6100896105da565b005b61009361076f565b6040516100a09190610bdb565b60405180910390f35b6100c360048036038101906100be9190610bf6565b610798565b005b60006100cf6107ac565b60006040518060a00160405280866040516020016100ed9190610bdb565b60405160208183030381529060405281526020018585604051602001610114929190610c81565b6040516020818303038152906040528152602001600067ffffffffffffffff81111561014357610142610ca5565b5b60405190808252806020026020018201604052801561017c57816020015b6101696109e7565b8152602001906001900390816101615790505b508152602001600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016101da604051806020016040528062030d4081525061083c565b81525090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded88846040518363ffffffff1660e01b815260040161023e929190610ef3565b602060405180830381865afa15801561025b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027f9190610f4f565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102dc9190610bdb565b602060405180830381865afa1580156102f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031d9190610f4f565b8111156103fe57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161037f9190610bdb565b602060405180830381865afa15801561039c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c09190610f4f565b816040517f8f0f42060000000000000000000000000000000000000000000000000000000081526004016103f5929190610f8b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161047d929190610fb4565b6020604051808303816000875af115801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c09190611015565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f988846040518363ffffffff1660e01b815260040161051e929190610ef3565b6020604051808303816000875af115801561053d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610561919061106e565b92508667ffffffffffffffff16837fd36445359b3c6e26c120659aef090ce0f2eb005cf9af450d11aa1225609b4f4d888888600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040516105c895949392919061109b565b60405180910390a35050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066190611135565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107a06107ac565b6107a9816108bb565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610831906111a1565b60405180910390fd5b565b60606397a657c960e01b8260405160240161085791906111dd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092090611244565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b610a3e81610a21565b8114610a4957600080fd5b50565b600081359050610a5b81610a35565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8c82610a61565b9050919050565b610a9c81610a81565b8114610aa757600080fd5b50565b600081359050610ab981610a93565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610ae457610ae3610abf565b5b8235905067ffffffffffffffff811115610b0157610b00610ac4565b5b602083019150836001820283011115610b1d57610b1c610ac9565b5b9250929050565b60008060008060608587031215610b3e57610b3d610a17565b5b6000610b4c87828801610a4c565b9450506020610b5d87828801610aaa565b935050604085013567ffffffffffffffff811115610b7e57610b7d610a1c565b5b610b8a87828801610ace565b925092505092959194509250565b6000819050919050565b610bab81610b98565b82525050565b6000602082019050610bc66000830184610ba2565b92915050565b610bd581610a81565b82525050565b6000602082019050610bf06000830184610bcc565b92915050565b600060208284031215610c0c57610c0b610a17565b5b6000610c1a84828501610aaa565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610c608385610c23565b9350610c6d838584610c34565b610c7683610c43565b840190509392505050565b60006020820190508181036000830152610c9c818486610c54565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cdd81610a21565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d1d578082015181840152602081019050610d02565b60008484015250505050565b6000610d3482610ce3565b610d3e8185610cee565b9350610d4e818560208601610cff565b610d5781610c43565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610d9781610a81565b82525050565b6000819050919050565b610db081610d9d565b82525050565b604082016000820151610dcc6000850182610d8e565b506020820151610ddf6020850182610da7565b50505050565b6000610df18383610db6565b60408301905092915050565b6000602082019050919050565b6000610e1582610d62565b610e1f8185610d6d565b9350610e2a83610d7e565b8060005b83811015610e5b578151610e428882610de5565b9750610e4d83610dfd565b925050600181019050610e2e565b5085935050505092915050565b600060a0830160008301518482036000860152610e858282610d29565b91505060208301518482036020860152610e9f8282610d29565b91505060408301518482036040860152610eb98282610e0a565b9150506060830151610ece6060860182610d8e565b5060808301518482036080860152610ee68282610d29565b9150508091505092915050565b6000604082019050610f086000830185610cd4565b8181036020830152610f1a8184610e68565b90509392505050565b610f2c81610d9d565b8114610f3757600080fd5b50565b600081519050610f4981610f23565b92915050565b600060208284031215610f6557610f64610a17565b5b6000610f7384828501610f3a565b91505092915050565b610f8581610d9d565b82525050565b6000604082019050610fa06000830185610f7c565b610fad6020830184610f7c565b9392505050565b6000604082019050610fc96000830185610bcc565b610fd66020830184610f7c565b9392505050565b60008115159050919050565b610ff281610fdd565b8114610ffd57600080fd5b50565b60008151905061100f81610fe9565b92915050565b60006020828403121561102b5761102a610a17565b5b600061103984828501611000565b91505092915050565b61104b81610b98565b811461105657600080fd5b50565b60008151905061106881611042565b92915050565b60006020828403121561108457611083610a17565b5b600061109284828501611059565b91505092915050565b60006080820190506110b06000830188610bcc565b81810360208301526110c3818688610c54565b90506110d26040830185610bcc565b6110df6060830184610f7c565b9695505050505050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b600061111f601683610c23565b915061112a826110e9565b602082019050919050565b6000602082019050818103600083015261114e81611112565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b600061118b601683610c23565b915061119682611155565b602082019050919050565b600060208201905081810360008301526111ba8161117e565b9050919050565b6020820160008201516111d76000850182610da7565b50505050565b60006020820190506111f260008301846111c1565b92915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061122e601783610c23565b9150611239826111f8565b602082019050919050565b6000602082019050818103600083015261125d81611221565b905091905056fea26469706673582212209dd2588b575220c35e07e4a0cc1c9e41d027166787fd3ef2e76a34b9f08ebc5d64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_link": "The address of the link contract.",
          "_router": "The address of the router contract."
        }
      },
      "sendMessage(uint64,address,string)": {
        "details": "Assumes your contract has sufficient LINK.",
        "params": {
          "destinationChainSelector": "The identifier (aka selector) for the destination blockchain.",
          "receiver": "The address of the recipient on the destination blockchain.",
          "text": "The string text to be sent."
        },
        "returns": {
          "messageId": "The ID of the message that was sent."
        }
      }
    },
    "title": "- A simple contract for sending string data across chains.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "constructor": {
        "notice": "Constructor initializes the contract with the router address."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "sendMessage(uint64,address,string)": {
        "notice": "Sends data to receiver on the destination chain."
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 270,
        "contract": "contracts/DataSender.sol:DataSender",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 272,
        "contract": "contracts/DataSender.sol:DataSender",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 694,
        "contract": "contracts/DataSender.sol:DataSender",
        "label": "s_router",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRouterClient)184"
      },
      {
        "astId": 697,
        "contract": "contracts/DataSender.sol:DataSender",
        "label": "s_linkToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(LinkTokenInterface)563"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IRouterClient)184": {
        "encoding": "inplace",
        "label": "contract IRouterClient",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)563": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      }
    }
  }
}